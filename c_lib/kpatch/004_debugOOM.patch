diff --git a/fs/binfmt_elf.c b/fs/binfmt_elf.c
index e3c6533..f68eb40 100644
--- a/fs/binfmt_elf.c
+++ b/fs/binfmt_elf.c
@@ -2066,6 +2066,9 @@ static int elf_core_dump(struct coredump_params *cprm)
 				page_cache_release(page);
 			} else
 				stop = !dump_seek(cprm->file, PAGE_SIZE);
+			/* Monitor fatal signal in the case where current OOM. */
+			if (fatal_signal_pending(current))
+				stop = 1;
 			if (stop)
 				goto end_coredump;
 		}
diff --git a/mm/oom_kill.c b/mm/oom_kill.c
index 7ee7e0d..42ea6bf 100644
--- a/mm/oom_kill.c
+++ b/mm/oom_kill.c
@@ -232,6 +232,15 @@ static struct task_struct *select_bad_process(unsigned long *ppoints,
 	struct task_struct *chosen = NULL;
 	struct timespec uptime;
 	*ppoints = 0;
+	int x;
+	static int cur=0, ctr =0;
+	static int init=0;
+	static pid_t deadlock_pid[100];
+
+	if(init==0){
+		memset(deadlock_pid,0,sizeof(deadlock_pid));
+		init = 1;
+	}
 
 	do_posix_clock_monotonic_gettime(&uptime);
 	for_each_process(p) {
@@ -249,17 +258,55 @@ static struct task_struct *select_bad_process(unsigned long *ppoints,
 		if (mem && !task_in_mem_cgroup(p, mem))
 			continue;
 
+		for(x=0;x<100;x++){
+			if(deadlock_pid[x] == task_pid_nr(p))
+				break;
+		}
+		if(x!=100){
+			printk("Skip deadlock %d\n",deadlock_pid[x]);
+			continue;
+		}
+
+
 		/*
 		 * This task already has access to memory reserves and is
 		 * being killed. Don't allow any other task access to the
 		 * memory reserve.
 		 *
-		 * Note: this may have a chance of deadlock if it gets
-		 * blocked waiting for another task which itself is waiting
-		 * for memory. Is there a better alternative?
+		 * In order to avoid deadlock we need to detect if the task
+		 * which has access to memory reserves is block waiting for 
+		 * another task which itself is waiting for memory. In that
+		 * case we need to pick another sacrificial lamb if we want
+		 * to make progress.
 		 */
-		if (test_tsk_thread_flag(p, TIF_MEMDIE))
+		if (test_tsk_thread_flag(p, TIF_MEMDIE)){
+			if(cur != p->pid){
+				ctr = 0;
+				cur = p->pid;
+			}
+			else{
+				ctr++;
+				if(ctr >1000){
+					printk("\n%s/%d OOM deadlock\n",
+						p->comm, task_pid_nr(p));
+			//		show_stack(p, NULL);
+			//		printk("\n\n\n");
+					ctr =0;
+					/* This is critical since the current dying thread is not making progress */
+					clear_tsk_thread_flag(p,TIF_MEMDIE);
+					for(x=0;x<100;x++){
+						if(!deadlock_pid[x]){
+							deadlock_pid[x] = task_pid_nr(p);
+							break;
+						}
+					}
+					if(x==100)
+						BUG();
+					return ERR_PTR(-1UL);
+				}
+			}
 			return ERR_PTR(-1UL);
+		}
 
 		/*
 		 * This is in the process of releasing memory so wait for it
@@ -288,7 +335,7 @@ static struct task_struct *select_bad_process(unsigned long *ppoints,
 			*ppoints = points;
 		}
 	}
-
+	printk("\n%s/%d OOM chosen\n", chosen->comm, task_pid_nr(chosen));
 	return chosen;
 }
 
@@ -408,6 +455,7 @@ static int oom_kill_process(struct task_struct *p, gfp_t gfp_mask, int order,
 {
 	struct task_struct *c;
 
+#if 0
 	if (printk_ratelimit()) {
 		printk(KERN_WARNING "%s invoked oom-killer: "
 			"gfp_mask=0x%x, order=%d, oom_adj=%d\n",
@@ -422,6 +470,7 @@ static int oom_kill_process(struct task_struct *p, gfp_t gfp_mask, int order,
 		if (sysctl_oom_dump_tasks)
 			dump_tasks(mem);
 	}
+#endif
 
 	/*
 	 * If the task is already exiting, don't alarm the sysadmin or kill
