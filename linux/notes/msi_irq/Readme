Regular MSI are hooked part of the MSI capability structure in 
PCI cfg space;

MSI-X are hooked in the device memory itself.



struct msi_msg {
	u32	address_lo;	/* low 32 bits of msi message address */
	u32	address_hi;	/* high 32 bits of msi message address */
	u32	data;		/* 16 bits of msi message data */
};

struct msi_desc {
	struct {
		__u8	is_msix	: 1;
		__u8	multiple: 3;	/* log2 number of messages */
		__u8	maskbit	: 1; 	/* mask-pending bit supported ?   */
		__u8	is_64	: 1;	/* Address size: 0=32bit 1=64bit  */
		__u8	pos;	 	/* Location of the msi capability */
		__u16	entry_nr;    	/* specific enabled entry 	  */
		unsigned default_irq;	/* default pre-assigned irq	  */ // SAVED VALUE
	} msi_attrib;

	u32 masked;			/* mask bits */
	unsigned int irq;
	struct list_head list;

	union {
		void __iomem *mask_base;
		u8 mask_pos;
	};
	struct pci_dev *dev;

	/* Last set MSI message */
	struct msi_msg msg;
};

/*
pci_enable_msi() return the MSI IRQ number to device was enabled with;
*/
pci_enable_msi(){
	struct msi_desc *entry;
	entry = alloc_msi_entry(dev);
	...
	...
	/* In pci_dev, there is a per-device list of MSI */
	struct pci_dev {
		...
		...

		struct list_head msi_list;
	}

	list_add_tail(&entry->list, &dev->msi_list);

	/* This is the function that grap IRQ 
	 * In our cases this is in: arch/x86/kernel/apic/io_apic.c
	 */
	ret = arch_setup_msi_irqs(dev, nvec, PCI_CAP_ID_MSI);


int arch_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
{
	//node = Look on which socket the pci_dev is attach to
	node = dev_to_node(&dev->dev);
	...
	...
	// dmesg |grep nr_irqs_gsi gives the number of IRQ line ( depend on the amount of IO-APIC )
	// MSI goes after those number
	irq_want = nr_irqs_gsi;
	...
	...
	// Walk the per pci_dev msi list and for each entry

	list_for_each_entry(msidesc, &dev->msi_list, list) {
		irq = create_irq_nr(irq_want, node, dev);


/**
 * struct irq_desc - interrupt descriptor
 * @irq:		interrupt number for this descriptor
 * @timer_rand_state:	pointer to timer rand state struct
 * @kstat_irqs:		irq stats per cpu
 * @irq_2_iommu:	iommu with this irq
 * @handle_irq:		highlevel irq-events handler [if NULL, __do_IRQ()]
 * @chip:		low level interrupt hardware access
 * @msi_desc:		MSI descriptor
 * @handler_data:	per-IRQ data for the irq_chip methods
 * @chip_data:		platform-specific per-chip private data for the chip
 *			methods, to allow shared chip implementations
 * @action:		the irq action chain
 * @status:		status information
 * @depth:		disable-depth, for nested irq_disable() calls
 * @wake_depth:		enable depth, for multiple set_irq_wake() callers
 * @irq_count:		stats field to detect stalled irqs
 * @last_unhandled:	aging timer for unhandled count
 * @irqs_unhandled:	stats field for spurious unhandled interrupts
 * @lock:		locking for SMP
 * @affinity:		IRQ affinity on SMP
 * @node:		node index useful for balancing
 * @pending_mask:	pending rebalanced interrupts
 * @threads_active:	number of irqaction threads currently running
 * @wait_for_threads:	wait queue for sync_irq to wait for threaded handlers
 * @dir:		/proc/irq/ procfs entry
 * @name:		flow handler name for /proc/interrupts output
 */

/*
 * Dynamic irq allocate and deallocation
 */
unsigned int create_irq_nr(unsigned int irq_want, int node, struct pci_dev *pdev)
{
	struct irq_cfg *cfg_new = NULL;
	struct irq_desc *desc_new = NULL;

/* nr_irqs depends on the following */
#define CPU_VECTOR_LIMIT		(  8 * NR_CPUS      )
#define IO_APIC_VECTOR_LIMIT		( 32 * MAX_IO_APICS )

#ifdef CONFIG_X86_IO_APIC
# ifdef CONFIG_SPARSE_IRQ
#  define NR_IRQS					\
	(CPU_VECTOR_LIMIT > IO_APIC_VECTOR_LIMIT ?	\
		(NR_VECTORS + CPU_VECTOR_LIMIT)  :	\
		(NR_VECTORS + IO_APIC_VECTOR_LIMIT))

	/* 
	 * Try to allocate an IRQ starting at irq_want which is nr_irqs_gsi
	 * and go until all IRQ slot are exhausted
	 */
	for (new = irq_want; new < nr_irqs; new++) {


/* 
 * the kernel maintain a global array of irq_descriptor
 *
 * extern struct irq_desc **irq_desc_ptrs;
 *
 * irq_to_desc_alloc_node try to allocate (new IRQ number)
 * If the global array[new] exist return it;
 * Otherwise allocate a new one
 */
		desc_new = irq_to_desc_alloc_node(new, node);
		if (!desc_new) {
			printk(KERN_INFO "can not get irq_desc for %d\n", new);
			continue;
		}
		cfg_new = desc_new->chip_data;

/*
 * It's very well possible that the IRQ slot is already taken
 * so in this case try another one.
 */
		if (cfg_new->vector != 0)
			continue;

/*
 * IF the descriptor was previously used by another slot migrate it over to this
 * node and make sure all the glue follow
 */
		desc_new = move_irq_desc(desc_new, node);
		cfg_new = desc_new->chip_data;
		/* Remember the pcidev part of the irq cfg structure */
		cfg_new->pdev = pdev;


/*
 * The vector number is allocated from a global array bitmap
 * 	extern DECLARE_BITMAP(used_vectors, NR_VECTORS);
 * 	if __assign_irq_vector is OK it will UPDATE cfg->vector = vector; in the struct irq_desc
 * 	accordingly
 * 	The filed is present in chip_data as a 
 * 		struct irq_cfg *cfg_new = NULL;
struct irq_cfg {
	struct irq_pin_list	*irq_2_pin;
	cpumask_var_t		domain;
	cpumask_var_t		old_domain;
	u8			vector;
	u8			move_in_progress : 1;
	struct pci_dev *pdev;
};
 */
		if (__assign_irq_vector(new, cfg_new, apic->target_cpus()) == 0)
			irq = new;
		break;





At this POINT:
The device is either in MSI or MSi-X mode:


THEN:
int request_threaded_irq(unsigned int irq, irq_handler_t handler,
			 irq_handler_t thread_fn, unsigned long irqflags,
			 const char *devname, void *dev_id)
{
	struct irqaction *action;
	struct irq_desc *desc;

/* Descriptor is obtain BACK from the IRQ number; Remember that global array */
	desc = irq_to_desc(irq);
	if (!desc)
		return -EINVAL;

/*
 * Then an action structure is attached to it
 */

	action = kzalloc(sizeof(struct irqaction), GFP_KERNEL);
/**
 * struct irqaction - per interrupt action descriptor
 * @handler:	interrupt handler function
 * @flags:	flags (see IRQF_* above)
 * @name:	name of the device
 * @dev_id:	cookie to identify the device
 * @next:	pointer to the next irqaction for shared interrupts
 * @irq:	interrupt number
 * @dir:	pointer to the proc/irq/NN/name entry
 * @thread_fn:	interupt handler function for threaded interrupts
 * @thread:	thread pointer for threaded interrupts
 * @thread_flags:	flags related to @thread
 */



Then the chip IRQ (OpenPIC, APIC, ... is programmed )
	chip_bus_lock(irq, desc);
	retval = __setup_irq(irq, desc, action);
	chip_bus_sync_unlock(irq, desc);



FLOW:
~~~~~
Upon pdev MSI, the IRQ chip will raise the appropriate vector. The irq descr
is look up and the handler is know. The handler is called.


struct irq_desc [IRQ ]
	...
	vector from API


The kernel 
