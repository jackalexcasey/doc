From 878640b1ef135572f33bf48fb7903aca6bdf13cb Mon Sep 17 00:00:00 2001
From: Etienne <etmartin@etmartin-desktop.(none)>
Date: Thu, 2 Aug 2012 10:07:07 -0400
Subject: [PATCH 09/14] vdev core cleanup

---
 drivers/vdev/Makefile |    2 +-
 drivers/vdev/core.c   |  414 ++++++++++++++++++++++++++++++++++++++++++++++++
 drivers/vdev/kmmio.c  |  417 -------------------------------------------------
 include/linux/vdev.h  |    7 +-
 4 files changed, 417 insertions(+), 423 deletions(-)
 delete mode 100644 drivers/vdev/kmmio.c

diff --git a/drivers/vdev/Makefile b/drivers/vdev/Makefile
index a28ce25..afc335c 100644
--- a/drivers/vdev/Makefile
+++ b/drivers/vdev/Makefile
@@ -1,2 +1,2 @@
 obj-y += vdev.o
-vdev-y := core.o kmmio.o
+vdev-y := core.o
diff --git a/drivers/vdev/core.c b/drivers/vdev/core.c
index 3a6b900..374949c 100644
--- a/drivers/vdev/core.c
+++ b/drivers/vdev/core.c
@@ -6,10 +6,421 @@
 #include <linux/version.h>
 #include <linux/kallsyms.h>
 #include <linux/vdev.h>
+#include <linux/percpu.h>
+#include <linux/cpu.h>
+#include <asm/pgtable.h>
+#include <asm/e820.h> /* for ISA_START_ADDRESS */
+#include <asm/atomic.h>
+
+#include "../../arch/x86/mm/pf_in.h"
+
+#define NAME "vdev_emul: "
+
+struct trap_reason {
+	unsigned long addr;
+	unsigned long ip;
+	enum reason_type type;
+	int active_traces;
+};
+
+struct remap_trace {
+	struct list_head list;
+	struct kmmio_probe probe;
+	resource_size_t phys;
+	unsigned long id;
+};
 
 static DEFINE_SPINLOCK(vdev_lock);
 static LIST_HEAD(vdev_list);
 
+/* Accessed per-cpu. */
+static DEFINE_PER_CPU(struct trap_reason, vdev_pf_reason);
+static DEFINE_PER_CPU(struct mmiotrace_rw, vdev_cpu_trace);
+
+static DEFINE_SPINLOCK(trace_lock);
+static atomic_t mmiotrace_enabled = ATOMIC_INIT(0);
+static LIST_HEAD(trace_list);		/* struct remap_trace */
+
+static bool is_enabled(void)
+{
+	return atomic_read(&mmiotrace_enabled);
+}
+
+static void print_pte(unsigned long address)
+{
+	unsigned int level;
+	pte_t *pte = lookup_address(address, &level);
+
+	if (!pte) {
+		pr_err(NAME "Error in %s: no pte for page 0x%08lx\n",
+							__func__, address);
+		return;
+	}
+
+	if (level == PG_LEVEL_2M) {
+		pr_emerg(NAME "4MB pages are not currently supported: "
+							"0x%08lx\n", address);
+		BUG();
+	}
+	pr_info(NAME "pte for 0x%lx: 0x%llx 0x%llx\n", address,
+		(unsigned long long)pte_val(*pte),
+		(unsigned long long)pte_val(*pte) & _PAGE_PRESENT);
+}
+
+/*
+ * For some reason the pre/post pairs have been called in an
+ * unmatched order. Report and die.
+ */
+static void die_kmmio_nesting_error(struct pt_regs *regs, unsigned long addr)
+{
+	const struct trap_reason *my_reason = &get_cpu_var(vdev_pf_reason);
+	pr_emerg(NAME "unexpected fault for address: 0x%08lx, "
+					"last fault for address: 0x%08lx\n",
+					addr, my_reason->addr);
+	print_pte(addr);
+	print_symbol(KERN_EMERG "faulting IP is at %s\n", regs->ip);
+	print_symbol(KERN_EMERG "last faulting IP was at %s\n", my_reason->ip);
+#ifdef __i386__
+	pr_emerg("eax: %08lx   ebx: %08lx   ecx: %08lx   edx: %08lx\n",
+			regs->ax, regs->bx, regs->cx, regs->dx);
+	pr_emerg("esi: %08lx   edi: %08lx   ebp: %08lx   esp: %08lx\n",
+			regs->si, regs->di, regs->bp, regs->sp);
+#else
+	pr_emerg("rax: %016lx   rcx: %016lx   rdx: %016lx\n",
+					regs->ax, regs->cx, regs->dx);
+	pr_emerg("rsi: %016lx   rdi: %016lx   rbp: %016lx   rsp: %016lx\n",
+				regs->si, regs->di, regs->bp, regs->sp);
+#endif
+	put_cpu_var(vdev_pf_reason);
+	BUG();
+}
+
+static void pre(struct kmmio_probe *p, struct pt_regs *regs,
+						unsigned long addr)
+{
+	struct trap_reason *my_reason = &get_cpu_var(vdev_pf_reason);
+	struct mmiotrace_rw *my_trace = &get_cpu_var(vdev_cpu_trace);
+	const unsigned long instptr = instruction_pointer(regs);
+	const enum reason_type type = get_ins_type(instptr);
+	struct remap_trace *trace = p->private;
+
+	/* it doesn't make sense to have more than one active trace per cpu */
+	if (my_reason->active_traces)
+		die_kmmio_nesting_error(regs, addr);
+	else
+		my_reason->active_traces++;
+
+	my_reason->type = type;
+	my_reason->addr = addr;
+	my_reason->ip = instptr;
+
+	my_trace->phys = addr - trace->probe.addr + trace->phys;
+	my_trace->map_id = trace->id;
+
+	my_trace->pc = instptr;
+
+	/*
+	 * XXX: the timestamp recorded will be *after* the tracing has been
+	 * done, not at the time we hit the instruction. SMP implications
+	 * on event ordering?
+	 */
+
+	switch (type) {
+	case REG_READ:
+		my_trace->opcode = MMIO_READ;
+		my_trace->width = get_ins_mem_width(instptr);
+		break;
+	case REG_WRITE:
+		my_trace->opcode = MMIO_WRITE;
+		my_trace->width = get_ins_mem_width(instptr);
+		my_trace->value = get_ins_reg_val(instptr, regs);
+		break;
+	case IMM_WRITE:
+		my_trace->opcode = MMIO_WRITE;
+		my_trace->width = get_ins_mem_width(instptr);
+		my_trace->value = get_ins_imm_val(instptr);
+		break;
+	default:
+		{
+			unsigned char *ip = (unsigned char *)instptr;
+			my_trace->opcode = MMIO_UNKNOWN_OP;
+			my_trace->width = 0;
+			my_trace->value = (*ip) << 16 | *(ip + 1) << 8 |
+								*(ip + 2);
+		}
+	}
+	put_cpu_var(vdev_cpu_trace);
+	put_cpu_var(vdev_pf_reason);
+}
+
+static void post(struct kmmio_probe *p, unsigned long condition,
+							struct pt_regs *regs)
+{
+	int rc;
+	unsigned long val;
+	struct trap_reason *my_reason = &get_cpu_var(vdev_pf_reason);
+	struct mmiotrace_rw *my_trace = &get_cpu_var(vdev_cpu_trace);
+
+	/* this should always return the active_trace count to 0 */
+	my_reason->active_traces--;
+	if (my_reason->active_traces) {
+		pr_emerg(NAME "unexpected post handler");
+		BUG();
+	}
+
+	/* 
+	 * Here vdev_dispatch_io looks if the current address belongs
+	 * to the emulation layer; If it does it returns 0
+	 */
+	val = 0;
+	rc = vdev_dispatch_io(my_trace,&val);
+
+	switch (my_reason->type) {
+	case REG_READ:
+		/* 
+		 * set_ins_reg_val walk the instruction sets and identify the register
+		 * that contain the readed value. For the emulation case we replace that
+		 * value with the emulated one returned from vdev_dispatch_io.
+		 * 	show_registers(regs);
+		 * 	The trace decoding is performed after to maintain consistency
+		 */
+		if(rc==0)
+			set_ins_reg_val(my_reason->ip, regs, val);
+
+/* not needed
+		my_trace->value = get_ins_reg_val(my_reason->ip, regs);*/
+		break;
+	default:
+		break;
+	}
+
+	/* Here we callback into vdev with mytrace information */
+	put_cpu_var(vdev_cpu_trace);
+	put_cpu_var(vdev_pf_reason);
+}
+
+static void ioremap_trace_core(resource_size_t offset, unsigned long size,
+							void __iomem *addr)
+{
+	static atomic_t next_id;
+	struct remap_trace *trace = kmalloc(sizeof(*trace), GFP_KERNEL);
+	/* These are page-unaligned. */
+	struct mmiotrace_map map = {
+		.phys = offset,
+		.virt = (unsigned long)addr,
+		.len = size,
+		.opcode = MMIO_PROBE
+	};
+
+	if (!trace) {
+		pr_err(NAME "kmalloc failed in ioremap\n");
+		return;
+	}
+
+	*trace = (struct remap_trace) {
+		.probe = {
+			.addr = (unsigned long)addr,
+			.len = size,
+			.pre_handler = pre,
+			.post_handler = post,
+			.private = trace
+		},
+		.phys = offset,
+		.id = atomic_inc_return(&next_id)
+	};
+	map.map_id = trace->id;
+
+	spin_lock_irq(&trace_lock);
+	if (!is_enabled()) {
+		kfree(trace);
+		goto not_enabled;
+	}
+
+	list_add_tail(&trace->list, &trace_list);
+	register_kmmio_probe(&trace->probe);
+
+not_enabled:
+	spin_unlock_irq(&trace_lock);
+}
+
+static void iounmap_trace_core(volatile void __iomem *addr)
+{
+	struct mmiotrace_map map = {
+		.phys = 0,
+		.virt = (unsigned long)addr,
+		.len = 0,
+		.opcode = MMIO_UNPROBE
+	};
+	struct remap_trace *trace;
+	struct remap_trace *tmp;
+	struct remap_trace *found_trace = NULL;
+
+	pr_debug(NAME "Unmapping %p.\n", addr);
+
+	spin_lock_irq(&trace_lock);
+	if (!is_enabled())
+		goto not_enabled;
+
+	list_for_each_entry_safe(trace, tmp, &trace_list, list) {
+		if ((unsigned long)addr == trace->probe.addr) {
+			unregister_kmmio_probe(&trace->probe);
+			list_del(&trace->list);
+			found_trace = trace;
+			break;
+		}
+	}
+	map.map_id = (found_trace) ? found_trace->id : -1;
+
+not_enabled:
+	spin_unlock_irq(&trace_lock);
+	if (found_trace) {
+		synchronize_rcu(); /* unregister_kmmio_probe() requirement */
+		kfree(found_trace);
+	}
+}
+
+static void clear_trace_list(void)
+{
+	struct remap_trace *trace;
+	struct remap_trace *tmp;
+
+	/*
+	 * No locking required, because the caller ensures we are in a
+	 * critical section via mutex, and is_enabled() is false,
+	 * i.e. nothing can traverse or modify this list.
+	 * Caller also ensures is_enabled() cannot change.
+	 */
+	list_for_each_entry(trace, &trace_list, list) {
+		pr_notice(NAME "purging non-iounmapped "
+					"trace @0x%08lx, size 0x%lx.\n",
+					trace->probe.addr, trace->probe.len);
+		unregister_kmmio_probe(&trace->probe);
+	}
+	synchronize_rcu(); /* unregister_kmmio_probe() requirement */
+
+	list_for_each_entry_safe(trace, tmp, &trace_list, list) {
+		list_del(&trace->list);
+		kfree(trace);
+	}
+}
+
+#ifdef CONFIG_HOTPLUG_CPU
+static cpumask_var_t downed_cpus;
+
+static void enter_uniprocessor(void)
+{
+	int cpu;
+	int err;
+
+	if (downed_cpus == NULL &&
+	    !alloc_cpumask_var(&downed_cpus, GFP_KERNEL)) {
+		pr_notice(NAME "Failed to allocate mask\n");
+		goto out;
+	}
+
+	get_online_cpus();
+	cpumask_copy(downed_cpus, cpu_online_mask);
+	cpumask_clear_cpu(cpumask_first(cpu_online_mask), downed_cpus);
+	if (num_online_cpus() > 1)
+		pr_notice(NAME "Disabling non-boot CPUs...\n");
+	put_online_cpus();
+
+	for_each_cpu(cpu, downed_cpus) {
+		err = cpu_down(cpu);
+		if (!err)
+			pr_info(NAME "CPU%d is down.\n", cpu);
+		else
+			pr_err(NAME "Error taking CPU%d down: %d\n", cpu, err);
+	}
+out:
+	if (num_online_cpus() > 1)
+		pr_warning(NAME "multiple CPUs still online, "
+						"may miss events.\n");
+}
+
+/* __ref because leave_uniprocessor calls cpu_up which is __cpuinit,
+   but this whole function is ifdefed CONFIG_HOTPLUG_CPU */
+static void __ref leave_uniprocessor(void)
+{
+	int cpu;
+	int err;
+
+	if (downed_cpus == NULL || cpumask_weight(downed_cpus) == 0)
+		return;
+	pr_notice(NAME "Re-enabling CPUs...\n");
+	for_each_cpu(cpu, downed_cpus) {
+		err = cpu_up(cpu);
+		if (!err)
+			pr_info(NAME "enabled CPU%d.\n", cpu);
+		else
+			pr_err(NAME "cannot re-enable CPU%d: %d\n", cpu, err);
+	}
+}
+
+#else /* !CONFIG_HOTPLUG_CPU */
+static void enter_uniprocessor(void)
+{
+	if (num_online_cpus() > 1)
+		pr_warning(NAME "multiple CPUs are online, may miss events. "
+			"Suggest booting with maxcpus=1 kernel argument.\n");
+}
+
+static void leave_uniprocessor(void)
+{
+}
+#endif
+
+void vdev_ioremap(resource_size_t offset, unsigned long size,
+	void __iomem *addr)
+{
+	if (!is_enabled()) /* recheck and proper locking in *_core() */
+		return;
+
+	/*
+	 * Here we check FIRST is the offset / size fall into an emulated 
+	 * device region ONLY then we register the emulation back-end
+	 */
+	ioremap_trace_core(offset, size, addr);
+
+	pr_debug("user_mmiotrace_ioremap_*(0x%llx, 0x%lx) = %p\n",
+			(unsigned long long)offset, size, addr);
+}
+
+void vdev_iounmap(volatile void __iomem *addr)
+{
+	if (!is_enabled()) /* recheck and proper locking in *_core() */
+		return;
+	
+	iounmap_trace_core(addr);
+
+	pr_debug("user_mmiotrace_iounmap_%p\n",addr);
+}
+
+void vdev_enable_mmiotrace(void)
+{
+	if (is_enabled())
+		goto out;
+	
+	kmmio_init();
+	enter_uniprocessor();
+	pr_info(NAME "enabled.\n");
+out:
+	atomic_inc(&mmiotrace_enabled);
+}
+
+void vdev_disable_mmiotrace(void)
+{
+	if (atomic_dec_and_test(&mmiotrace_enabled)){
+		BUG_ON(is_enabled());
+		clear_trace_list(); /* guarantees: no more kmmio callbacks */
+		leave_uniprocessor();
+		kmmio_cleanup();
+		pr_info(NAME "disabled.\n");
+	}
+}
+
+
+
 static struct vdev_io *vdev_search(struct mmiotrace_rw *mmio, int *res, resource_size_t *offset)
 {
 	int x;
@@ -208,3 +619,6 @@ void vdev_unregister_mapping(volatile void __iomem *addr)
 }
 EXPORT_SYMBOL(vdev_unregister_mapping);
 
+
+
+
diff --git a/drivers/vdev/kmmio.c b/drivers/vdev/kmmio.c
deleted file mode 100644
index 11e0ad1..0000000
--- a/drivers/vdev/kmmio.c
+++ /dev/null
@@ -1,417 +0,0 @@
-#include <linux/module.h>
-#include <linux/debugfs.h>
-#include <linux/uaccess.h>
-#include <linux/io.h>
-#include <linux/version.h>
-#include <linux/kallsyms.h>
-#include <asm/pgtable.h>
-#include <linux/mmiotrace.h>
-#include <asm/e820.h> /* for ISA_START_ADDRESS */
-#include <asm/atomic.h>
-#include <linux/percpu.h>
-#include <linux/cpu.h>
-#include <linux/vdev.h>
-#include "../../arch/x86/mm/pf_in.h"
-
-#define NAME "vdev_emul: "
-
-struct trap_reason {
-	unsigned long addr;
-	unsigned long ip;
-	enum reason_type type;
-	int active_traces;
-};
-
-struct remap_trace {
-	struct list_head list;
-	struct kmmio_probe probe;
-	resource_size_t phys;
-	unsigned long id;
-};
-
-/* Accessed per-cpu. */
-static DEFINE_PER_CPU(struct trap_reason, vdev_pf_reason);
-static DEFINE_PER_CPU(struct mmiotrace_rw, vdev_cpu_trace);
-
-static DEFINE_SPINLOCK(trace_lock);
-static atomic_t mmiotrace_enabled = ATOMIC_INIT(0);
-static LIST_HEAD(trace_list);		/* struct remap_trace */
-
-static bool is_enabled(void)
-{
-	return atomic_read(&mmiotrace_enabled);
-}
-
-static void print_pte(unsigned long address)
-{
-	unsigned int level;
-	pte_t *pte = lookup_address(address, &level);
-
-	if (!pte) {
-		pr_err(NAME "Error in %s: no pte for page 0x%08lx\n",
-							__func__, address);
-		return;
-	}
-
-	if (level == PG_LEVEL_2M) {
-		pr_emerg(NAME "4MB pages are not currently supported: "
-							"0x%08lx\n", address);
-		BUG();
-	}
-	pr_info(NAME "pte for 0x%lx: 0x%llx 0x%llx\n", address,
-		(unsigned long long)pte_val(*pte),
-		(unsigned long long)pte_val(*pte) & _PAGE_PRESENT);
-}
-
-/*
- * For some reason the pre/post pairs have been called in an
- * unmatched order. Report and die.
- */
-static void die_kmmio_nesting_error(struct pt_regs *regs, unsigned long addr)
-{
-	const struct trap_reason *my_reason = &get_cpu_var(vdev_pf_reason);
-	pr_emerg(NAME "unexpected fault for address: 0x%08lx, "
-					"last fault for address: 0x%08lx\n",
-					addr, my_reason->addr);
-	print_pte(addr);
-	print_symbol(KERN_EMERG "faulting IP is at %s\n", regs->ip);
-	print_symbol(KERN_EMERG "last faulting IP was at %s\n", my_reason->ip);
-#ifdef __i386__
-	pr_emerg("eax: %08lx   ebx: %08lx   ecx: %08lx   edx: %08lx\n",
-			regs->ax, regs->bx, regs->cx, regs->dx);
-	pr_emerg("esi: %08lx   edi: %08lx   ebp: %08lx   esp: %08lx\n",
-			regs->si, regs->di, regs->bp, regs->sp);
-#else
-	pr_emerg("rax: %016lx   rcx: %016lx   rdx: %016lx\n",
-					regs->ax, regs->cx, regs->dx);
-	pr_emerg("rsi: %016lx   rdi: %016lx   rbp: %016lx   rsp: %016lx\n",
-				regs->si, regs->di, regs->bp, regs->sp);
-#endif
-	put_cpu_var(vdev_pf_reason);
-	BUG();
-}
-
-static void pre(struct kmmio_probe *p, struct pt_regs *regs,
-						unsigned long addr)
-{
-	struct trap_reason *my_reason = &get_cpu_var(vdev_pf_reason);
-	struct mmiotrace_rw *my_trace = &get_cpu_var(vdev_cpu_trace);
-	const unsigned long instptr = instruction_pointer(regs);
-	const enum reason_type type = get_ins_type(instptr);
-	struct remap_trace *trace = p->private;
-
-	/* it doesn't make sense to have more than one active trace per cpu */
-	if (my_reason->active_traces)
-		die_kmmio_nesting_error(regs, addr);
-	else
-		my_reason->active_traces++;
-
-	my_reason->type = type;
-	my_reason->addr = addr;
-	my_reason->ip = instptr;
-
-	my_trace->phys = addr - trace->probe.addr + trace->phys;
-	my_trace->map_id = trace->id;
-
-	my_trace->pc = instptr;
-
-	/*
-	 * XXX: the timestamp recorded will be *after* the tracing has been
-	 * done, not at the time we hit the instruction. SMP implications
-	 * on event ordering?
-	 */
-
-	switch (type) {
-	case REG_READ:
-		my_trace->opcode = MMIO_READ;
-		my_trace->width = get_ins_mem_width(instptr);
-		break;
-	case REG_WRITE:
-		my_trace->opcode = MMIO_WRITE;
-		my_trace->width = get_ins_mem_width(instptr);
-		my_trace->value = get_ins_reg_val(instptr, regs);
-		break;
-	case IMM_WRITE:
-		my_trace->opcode = MMIO_WRITE;
-		my_trace->width = get_ins_mem_width(instptr);
-		my_trace->value = get_ins_imm_val(instptr);
-		break;
-	default:
-		{
-			unsigned char *ip = (unsigned char *)instptr;
-			my_trace->opcode = MMIO_UNKNOWN_OP;
-			my_trace->width = 0;
-			my_trace->value = (*ip) << 16 | *(ip + 1) << 8 |
-								*(ip + 2);
-		}
-	}
-	put_cpu_var(vdev_cpu_trace);
-	put_cpu_var(vdev_pf_reason);
-}
-
-static void post(struct kmmio_probe *p, unsigned long condition,
-							struct pt_regs *regs)
-{
-	int rc;
-	unsigned long val;
-	struct trap_reason *my_reason = &get_cpu_var(vdev_pf_reason);
-	struct mmiotrace_rw *my_trace = &get_cpu_var(vdev_cpu_trace);
-
-	/* this should always return the active_trace count to 0 */
-	my_reason->active_traces--;
-	if (my_reason->active_traces) {
-		pr_emerg(NAME "unexpected post handler");
-		BUG();
-	}
-
-	/* 
-	 * Here vdev_dispatch_io looks if the current address belongs
-	 * to the emulation layer; If it does it returns 0
-	 */
-	val = 0;
-	rc = vdev_dispatch_io(my_trace,&val);
-
-	switch (my_reason->type) {
-	case REG_READ:
-		/* 
-		 * set_ins_reg_val walk the instruction sets and identify the register
-		 * that contain the readed value. For the emulation case we replace that
-		 * value with the emulated one returned from vdev_dispatch_io.
-		 * 	show_registers(regs);
-		 * 	The trace decoding is performed after to maintain consistency
-		 */
-		if(rc==0)
-			set_ins_reg_val(my_reason->ip, regs, val);
-
-/* not needed
-		my_trace->value = get_ins_reg_val(my_reason->ip, regs);*/
-		break;
-	default:
-		break;
-	}
-
-	/* Here we callback into vdev with mytrace information */
-	put_cpu_var(vdev_cpu_trace);
-	put_cpu_var(vdev_pf_reason);
-}
-
-static void ioremap_trace_core(resource_size_t offset, unsigned long size,
-							void __iomem *addr)
-{
-	static atomic_t next_id;
-	struct remap_trace *trace = kmalloc(sizeof(*trace), GFP_KERNEL);
-	/* These are page-unaligned. */
-	struct mmiotrace_map map = {
-		.phys = offset,
-		.virt = (unsigned long)addr,
-		.len = size,
-		.opcode = MMIO_PROBE
-	};
-
-	if (!trace) {
-		pr_err(NAME "kmalloc failed in ioremap\n");
-		return;
-	}
-
-	*trace = (struct remap_trace) {
-		.probe = {
-			.addr = (unsigned long)addr,
-			.len = size,
-			.pre_handler = pre,
-			.post_handler = post,
-			.private = trace
-		},
-		.phys = offset,
-		.id = atomic_inc_return(&next_id)
-	};
-	map.map_id = trace->id;
-
-	spin_lock_irq(&trace_lock);
-	if (!is_enabled()) {
-		kfree(trace);
-		goto not_enabled;
-	}
-
-	list_add_tail(&trace->list, &trace_list);
-	register_kmmio_probe(&trace->probe);
-
-not_enabled:
-	spin_unlock_irq(&trace_lock);
-}
-
-static void iounmap_trace_core(volatile void __iomem *addr)
-{
-	struct mmiotrace_map map = {
-		.phys = 0,
-		.virt = (unsigned long)addr,
-		.len = 0,
-		.opcode = MMIO_UNPROBE
-	};
-	struct remap_trace *trace;
-	struct remap_trace *tmp;
-	struct remap_trace *found_trace = NULL;
-
-	pr_debug(NAME "Unmapping %p.\n", addr);
-
-	spin_lock_irq(&trace_lock);
-	if (!is_enabled())
-		goto not_enabled;
-
-	list_for_each_entry_safe(trace, tmp, &trace_list, list) {
-		if ((unsigned long)addr == trace->probe.addr) {
-			unregister_kmmio_probe(&trace->probe);
-			list_del(&trace->list);
-			found_trace = trace;
-			break;
-		}
-	}
-	map.map_id = (found_trace) ? found_trace->id : -1;
-
-not_enabled:
-	spin_unlock_irq(&trace_lock);
-	if (found_trace) {
-		synchronize_rcu(); /* unregister_kmmio_probe() requirement */
-		kfree(found_trace);
-	}
-}
-
-static void clear_trace_list(void)
-{
-	struct remap_trace *trace;
-	struct remap_trace *tmp;
-
-	/*
-	 * No locking required, because the caller ensures we are in a
-	 * critical section via mutex, and is_enabled() is false,
-	 * i.e. nothing can traverse or modify this list.
-	 * Caller also ensures is_enabled() cannot change.
-	 */
-	list_for_each_entry(trace, &trace_list, list) {
-		pr_notice(NAME "purging non-iounmapped "
-					"trace @0x%08lx, size 0x%lx.\n",
-					trace->probe.addr, trace->probe.len);
-		unregister_kmmio_probe(&trace->probe);
-	}
-	synchronize_rcu(); /* unregister_kmmio_probe() requirement */
-
-	list_for_each_entry_safe(trace, tmp, &trace_list, list) {
-		list_del(&trace->list);
-		kfree(trace);
-	}
-}
-
-#ifdef CONFIG_HOTPLUG_CPU
-static cpumask_var_t downed_cpus;
-
-static void enter_uniprocessor(void)
-{
-	int cpu;
-	int err;
-
-	if (downed_cpus == NULL &&
-	    !alloc_cpumask_var(&downed_cpus, GFP_KERNEL)) {
-		pr_notice(NAME "Failed to allocate mask\n");
-		goto out;
-	}
-
-	get_online_cpus();
-	cpumask_copy(downed_cpus, cpu_online_mask);
-	cpumask_clear_cpu(cpumask_first(cpu_online_mask), downed_cpus);
-	if (num_online_cpus() > 1)
-		pr_notice(NAME "Disabling non-boot CPUs...\n");
-	put_online_cpus();
-
-	for_each_cpu(cpu, downed_cpus) {
-		err = cpu_down(cpu);
-		if (!err)
-			pr_info(NAME "CPU%d is down.\n", cpu);
-		else
-			pr_err(NAME "Error taking CPU%d down: %d\n", cpu, err);
-	}
-out:
-	if (num_online_cpus() > 1)
-		pr_warning(NAME "multiple CPUs still online, "
-						"may miss events.\n");
-}
-
-/* __ref because leave_uniprocessor calls cpu_up which is __cpuinit,
-   but this whole function is ifdefed CONFIG_HOTPLUG_CPU */
-static void __ref leave_uniprocessor(void)
-{
-	int cpu;
-	int err;
-
-	if (downed_cpus == NULL || cpumask_weight(downed_cpus) == 0)
-		return;
-	pr_notice(NAME "Re-enabling CPUs...\n");
-	for_each_cpu(cpu, downed_cpus) {
-		err = cpu_up(cpu);
-		if (!err)
-			pr_info(NAME "enabled CPU%d.\n", cpu);
-		else
-			pr_err(NAME "cannot re-enable CPU%d: %d\n", cpu, err);
-	}
-}
-
-#else /* !CONFIG_HOTPLUG_CPU */
-static void enter_uniprocessor(void)
-{
-	if (num_online_cpus() > 1)
-		pr_warning(NAME "multiple CPUs are online, may miss events. "
-			"Suggest booting with maxcpus=1 kernel argument.\n");
-}
-
-static void leave_uniprocessor(void)
-{
-}
-#endif
-
-void vdev_ioremap(resource_size_t offset, unsigned long size,
-	void __iomem *addr)
-{
-	if (!is_enabled()) /* recheck and proper locking in *_core() */
-		return;
-
-	/*
-	 * Here we check FIRST is the offset / size fall into an emulated 
-	 * device region ONLY then we register the emulation back-end
-	 */
-	ioremap_trace_core(offset, size, addr);
-
-	pr_debug("user_mmiotrace_ioremap_*(0x%llx, 0x%lx) = %p\n",
-			(unsigned long long)offset, size, addr);
-}
-
-void vdev_iounmap(volatile void __iomem *addr)
-{
-	if (!is_enabled()) /* recheck and proper locking in *_core() */
-		return;
-	
-	iounmap_trace_core(addr);
-
-	pr_debug("user_mmiotrace_iounmap_%p\n",addr);
-}
-
-void vdev_enable_mmiotrace(void)
-{
-	if (is_enabled())
-		goto out;
-	
-	kmmio_init();
-	enter_uniprocessor();
-	pr_info(NAME "enabled.\n");
-out:
-	atomic_inc(&mmiotrace_enabled);
-}
-
-void vdev_disable_mmiotrace(void)
-{
-	if (atomic_dec_and_test(&mmiotrace_enabled)){
-		BUG_ON(is_enabled());
-		clear_trace_list(); /* guarantees: no more kmmio callbacks */
-		leave_uniprocessor();
-		kmmio_cleanup();
-		pr_info(NAME "disabled.\n");
-	}
-}
-
diff --git a/include/linux/vdev.h b/include/linux/vdev.h
index 77feb49..34cbd4e 100644
--- a/include/linux/vdev.h
+++ b/include/linux/vdev.h
@@ -25,13 +25,10 @@ struct vdev_io{
 };
 
 int vdev_dispatch_io(struct mmiotrace_rw *mmio, unsigned long *val);
+
 int vdev_register_device(struct vdev_io *vdev);
 int vdev_unregister_device(struct vdev_io *vdev);
-void vdev_enable_mmiotrace(void);
-void vdev_disable_mmiotrace(void);
-void vdev_ioremap(resource_size_t offset, unsigned long size,
-	void __iomem *addr);
-void vdev_iounmap(volatile void __iomem *addr);
+
 void vdev_register_mapping(resource_size_t offset, unsigned long size,
 	void __iomem *addr);
 void vdev_unregister_mapping(volatile void __iomem *addr);
-- 
1.7.0.4

