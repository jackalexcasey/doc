page_allocation
~~~~~~~~~~~~~~~
__alloc_pages_nodemask is the buddy allocator
	The fast path takes the pages from the free list
	When the fast path return NULL we go in the slow path.

__alloc_pages_slowpath
	Kick background reclaim
	try to allocate again
	Reset flag according to the strategy ( EX if TIF_MEMDIE then we allow ALLOC_NO_WATERMARKS )
	Try to allocate is the high priority __alloc_pages_high_priority
	Try compaction
	Try direct reclaim
	Then fall into '__alloc_pages_may_oom'

__alloc_pages_may_oom
	Try again and call out_of_memory => __out_of_memory(gfp_mask, order);

page_fault
~~~~~~~~~~~
do_page_fault (pt_regs )
	__do_page_fault   ==> handle_mm_fault ( PGD/PMD/PTE  + handle alloc PTE fault )
	
	mm_fault_error
	out_of_memory (local)
	pagefault_out_of_memory
		__out_of_memory(0, 0); /* unknown gfp_mask and order */

void __out_of_memory(gfp_t gfp_mask, int order)

	There is 2 path that lead to this ( __alloc_pages_slowpath & pagefault_out_of_memory )
	In the case of pagefault_out_of_memory there is no context

	__out_of_memory select bad process 'select_bad_process' in order to kill it;
	A) In the cases of 'pagefault_out_of_memory' we should see if there is anything
	we can get rid of like core dumping process
	B) The bad process selection skip 

__out_of_memory{
out_of_memory{
	oom_kill_process

oom_kill_task{
oom_kill_process{
	__oom_kill_task{
		p->rt.time_slice = HZ;
		set_tsk_thread_flag(p, TIF_MEMDIE); /*just set TIF_MEMDIE so it can die quickly*/
		force_sig(SIGKILL, p);


BUT: p = select_bad_process(&points, NULL);  RETURN if (PTR_ERR(p) == -1UL)
