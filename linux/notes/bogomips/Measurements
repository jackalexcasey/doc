# 
# Limitation
#

# This is the loop that does the measurement.
	for(x=0;x<loop_nr;x++){
		t1 = get_cycles();
		__ldelay(lpj);
		t2 = get_cycles();
		pcpu->delta[x] = t2-t1; 
	}

# At assembly level this translate into a series of opcodes
	for(x=0;x<loop_nr;x++){		// A,B,C,D
		t1 = get_cycles();		// E,F
		__ldelay(lpj);			// G,H
		t2 = get_cycles();		// I,J
		pcpu->delta[x] = t2-t1; // K
	}							// L,M,N
# t1 is obtain when F complete execution 
# t2 is obtain when J complete execution
# So this test measure if we are preempted during the [G,H,I,J] period
# A,B,C,D,E,F [G,H,I,J] K,L,M,N
# The period [A,B,C,D,E,F] OR [K,L,M,N] may take arbitrary long without beeing noticed.



# Another approach to the problem would be to do the following:
	for(x=0;x<loop_nr;x++){				
		t1 = get_cycles();				
		t3 = t1 - t2;					
		__ldelay(lpj);					
		t2 = get_cycles();				
		if(!x)
			pcpu->delta[x] = t1; // Mark the start of the test
		else
			pcpu->delta[x] = t2-t1 + t3; // Charge t3 on the next run
	}									



#
# If we run the above test in a loop and in the loop we find out how much
# off we are from t2-t1 + t3; the calibrated value should be the one without the cache effect.
# Then we can mark a % value from the optimal case.
# 
#
# The resolution can be obtain by changing the period in function of the CPU speed.
# i.e. n TSC cycle for a CPU that runs at t mhz

The wall time to TSC time goes as follow (from measurement)
Kernel_cpu_1;
200448;83701
200160;83578
200140;83576
200144;83577
200140;83575
200200;83574

200200/83574 = 2.394810098 TSC cycle per nanosec ==> 0.417569644 nsec per TSC cycle ==> 2.394810098e+9

cat /proc/cpuinfo
cpu MHz		: 2393.952

TSC cycle runs are the CPU frequency as shown by cat /proc/cpuinfo
~~~~~~~~~~~~~~~~~~~~~~

So to have a 1usec resolution we need n TSC cycle

With an approx we found the resolution needed in term of LPJ
This is the calibration part



As LPJ goes to 0 the 'b' part  y = mx+b is ~=60 that is the overhead for the measurement itself.


Example ( Characterization of the timer Interrupt latency )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Resolution needed 100 nsec CPU freq 2393.952 Mhz => 239 cycle
Resolution needed 1000 nsec => 2393 TSC cycle; What is LPJ???

From other test we have 
~200060 TSC cycle for LPJ = 100000
==> 2 TSC cycle per LPJ + Constant of 64; TSC = 2*LPJ + 64
==> 2393 TSC cycle LPG = ?
==> (TSC - 64)/2 =  1164

sudo rmmod bogomips
sudo dmesg -c >/dev/null
sudo insmod bogomips.ko l=1000 j=1164

Perfect !!! Resolution of 1 uSec
>>>>
>>>>2392;
>>>>2388;
>>>>


NOTE
~~~~~~~
The calibration is good and proven to work. the part that is needed is to find out if 
we have OR not the cpu from those data.
The current way of plotting tell us that sometime it may take a very long time 
to compute the task. In a graph its not good.

note that IRQ latency is good but it doesn't catch everything since in order to trigger it
you need to arm it and to arm it you need to run it...



Another thing would be to have a vector mode ( to compress the data )


Another way would be to print the time we are not running ONLY

while(1){
	t1 = get time
	delay
	t2 = get time
	if(t2 -t1 > Cal)
		t1 : t2-t1         <<<< Telling that at t1 time We didn't ran for t2 -t1 cycle

So the graph is

TSC start|---------|TSC T1__________________|T1 + T2 - t1|--------------


}

--> if( period  
