diff --git a/linux/notes/channel/compensated_timer/tx.c b/linux/notes/channel/compensated_timer/tx.c
index 8ed56f0..cec852c 100644
--- a/linux/notes/channel/compensated_timer/tx.c
+++ b/linux/notes/channel/compensated_timer/tx.c
@@ -49,7 +49,9 @@
 
 /* Here we use a rounded value to ease the convergence */
 //#define PAYLOAD_PULSE_CYCLE_LENGTH (cycles_t)100000
-#define PAYLOAD_PULSE_CYCLE_LENGTH (cycles_t)0x20000
+//#define PAYLOAD_PULSE_CYCLE_LENGTH (cycles_t)0x20000
+
+#define PAYLOAD_PULSE_CYCLE_LENGTH (cycles_t)0x1300000
 
 struct timespec carrier_ts = {
 	.tv_sec = SEC_PERIOD,
@@ -70,7 +72,7 @@ extern volatile int *spinlock;
  * data is transmitted in packet. Packet size is DATA_PACKET_SIZE
  *
  */
-#define DATA_PACKET_SIZE 100
+#define DATA_PACKET_SIZE 1024
 int data[DATA_PACKET_SIZE];
 unsigned long hit = 0;
 void modulate_data(void)
@@ -86,7 +88,7 @@ void modulate_data(void)
 
 			hit = hit + data[x];
 		}
-		if(transmitter)
+//		if(transmitter)
 			*spinlock = 0;
 }
 
@@ -153,9 +155,9 @@ void tx(void)
 		delta = ((t2 - t0) - (2* x * PAYLOAD_PULSE_CYCLE_LENGTH))>>3;
 
 
-		if(!(x%0x1000)){
+		if(!(x%0x10)){
 			/* Bring down the offset to 0x50 ; This is frequency tuning */
-			conv = conv + ((delta - 0x50 )/4);
+			conv = conv + ((delta - 0x100 )/4);
 //			fprintf(stderr, "%Lx %Lx\n", delta, conv);
 
 #if 1
@@ -163,6 +165,8 @@ void tx(void)
 			 * This is how we do phase shift;
 			 * First we shift back at coarse level. We've seen that once this
 			 * is locked down it typically doesn't move
+			 * 338260aeb648
+			 * 338286aeb670
 			 *
 			 * //TODO need to improve 
 			 */
@@ -175,11 +179,8 @@ void tx(void)
 				else
 					init = 1;
 			}
-			fprintf(stderr, "%Lx\n", t2);
-#if 0
-
 			if(init){
-				fprintf(stderr, "%Lu %Ld %Ld %d %d %d %d %d %d %d %d %d %d %d %d\n", t2, delta, hit,
+				fprintf(stderr, "%Lx %Ld %Ld %d %d %d %d %d %d %d %d %d %d %d %d\n", t2, delta, hit,
 					data[0], data[1], data[2],
 					data[10], data[11], data[12],
 					data[20], data[21], data[22],
@@ -188,8 +189,6 @@ void tx(void)
 			else
 				fprintf(stderr, "%Lx\n", t2);
 #endif
-
-#endif
 		}
 		x++;
 
